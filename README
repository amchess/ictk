-=[ ictk ]=- Internet Chess Toolkit 

SPECIFICATIONS & DESIGN
-----------------------

   If you're looking for a super fast Java implementation of a chess model 
to use as a basis for a chess engine you need to look elsewhere.  The 
design goal of this library has never been speed.  If it were it would 
create a LOT less objects.  This library started out in 1997 as a proof of 
Object Oriented design concepts.  The chess pieces generate their own 
moves.  A move object is an implementation of a Command Pattern.  And so 
on.

   Aside from proof of concept and general OOD exercises, this library 
strives to be extensible, feature rich and easy to use.  How well it 
achieves those goals are in the eye of the coder that's using it.  But the 
whole reason this is a library instead of an application is because too 
many people are re-writing the wheel.  This causes a lot of projects to 
get swamped in very common tasks of modeling the game, reading standard 
file notations and screen scraping internet server protocols.  Hopefully, 
ictk will foster quicker development of better tools and applications.  
And hopefully they'll be OS independent and open source.

CURRENT STATUS
--------------
   2012-03-03 - I'm migrating this library from its longtime home at
                Sourceforge.net where it has been hosted since 2002
		to GitHub.com.  Obviously, version control will be 
		swapped from SVN to GIT.  During this time I'm going
		to re-verify the tools work with current versions
		of Java and dependent libraries.

FEATURES
--------

   o Object oriented Chess game model (MVC based)
   o Legal move generation
   o Game history with variation support (alternative move suggestions)
   o Move comment support in text and Numeric Annotation Glyphs (NAG)
   o Standard Algebraic Notation (SAN) read/write support (internationalized
     for presentation in 16 languages)
   o Portable Game Notation (PGN) read/write support (including move 
     variations, and FEN)
   o Forsyth-Edwards Notation (FEN) read/write support
   o True MVC structure with board displays driven by game model events
   o Command-line Board display
   o Well documented. Sample code also provided.
   o FICS support (circa 2003)

REQUIREMENTS
------------

   o JDK 1.4 or better                               http://java.sun.com/
     this is mostly due to the use of "assert" throughout the
     source, the Regex libraries, and java.nio libraries for
     ictk.boardgame.chess.net.

   o Ant 1.5 or better                             http://ant.apache.org/
     this is because earlier versions did not support the 
     javac -source 1.4 feature.  You can do most things with
     Ant 1.4, but you can't generate the javadoc with it.

   o JUnit 3.8.0 or better                  http://junit.sourceforge.net/
     this is only necessary if you wish to run the regression testing
     suite.

   o Xalan-Java 2.5.0 or better            http://xml.apache.org/xalan-j/
     this is only necessary if you wish to generate the net events and
     parsers from their XML source.  The default JDK XSLT processor will
     work, but unfortunately dumps all the resulting files in the working
     directory because it doesn't support redirect:write.  You could
     copy them into the correct directories, if you like.

LICENSE
-------

   ictk is distributed under the GNU Public License version 2.  A copy of
this license is available in the file named COPYING, which should have
been included with this distribution.  

   If you would like a more liberal license, please contact the author.

INSTALLATION
------------

 * Pre-Compiled Libraries:

   For the pre-compiled libraries all you need to do is uncompress and 
untar the file you downloaded with the following command

   $ tar xfvz ictk-<VERSION>.tar.gz

   #note: replace <VERSION> with the version you downloaded.

Then take the .jar file and either put it on your classpath:

   In UNIX (bash shell):

      $ export CLASSPATH = "$CLASSPATH:<DIR>/ictk-<VERSION>.jar"

   In MS-Windows:
      
      C:> set CLASSPATH=<DIR>/ictk-<VERSION>.jar

Or it might be easier to copy the .jar file to your Extension directory,
which might look something like this: /usr/local/jdk/jre/lib/ext


 * Source from distribution:

   If you've downloaded the source tar-ball then just untar it into a 
directory of your choosing.  From there you can use Ant to build the class
files, Jar file, and documentation.  For the class files & documentation:

   $ ant compile
   $ ant docs


 * Source from CVS:

    If you got the source code from CVS you'll notice many of the Java source
code files are missing (and ICTK will not compile).  These source files are
generated through XML and XSTL.  To do this you must have Xalan-Java installed
then do the following:

   $ ant generate
   $ ant compile


DEBUGGING
---------

   By default both the pre-compiled libraries come with debugging info
compiled in.  From the command line you can turn the debugging info on
by using the java -D options to see a system property.  For example:

   $ java -DDebug.History=1 foo.java

   If you really need a little more speed and you don't ever want to 
see debugging info (if you really think ictk is that stable) you can
change the itck.util.Log.debug variable to false.  This will make 
debugging impossible and eliminate all the conditional checks for
debugging.  Then you need to compile the optimized source (getting rid
of java internal debugging info).

   $ ant clean
   $ ant optimize

Or if you wish to create an optimized jar file:

   $ ant optimized-jar


TESTING
-------
   If you wish to run the test suite, perhaps to see if it's your code that's
choking on a PGN file or ictk code, you can do so through ant and JUnit:

   $ ant test

This will run the full battery of tests, and is only available through the
source distro.

---
Last Updated: 2012-03-03 by jvarsoke
