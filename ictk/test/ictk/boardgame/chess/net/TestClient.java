/*
 *  ICTK - Internet Chess ToolKit
 *  More information is available at http://ictk.sourceforge.net
 *  Copyright (C) 2002 J. Varsoke <jvarsoke@ghostmanonfirst.com>
 *  All rights reserved.
 *
 *  $Id$
 *
 *  This file is part of ICTK.
 *
 *  ICTK is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  ICTK is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with ICTK; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 * TestClient.java
 *
 * Created on March 12, 2002, 10:43 PM
 */

package ictk.boardgame.chess.net;

/**
 *
 * @author  jvarsoke
 */
public class TestClient extends javax.swing.JFrame implements java.awt.event.ActionListener {

   static java.lang.String handle;
   static java.lang.String passwd;

   ictk.boardgame.chess.net.ics.fics.FICSProtocolHandler fics;
   
   /** Creates new form TestClient */
    public TestClient() {
        initComponents();
	fics = new ictk.boardgame.chess.net.ics.fics.FICSProtocolHandler();
	connect(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
       tfCommand = new javax.swing.JTextField();
       bConnect = new javax.swing.JButton();
       
       setTitle("ICS Test Client");
       addWindowListener(new java.awt.event.WindowAdapter() {
          public void windowClosing(java.awt.event.WindowEvent evt) {
             exitForm(evt);
          }
       });
       
       tfCommand.setFont(new java.awt.Font("Lucida Sans Typewriter", 0, 12));
       tfCommand.addActionListener(new java.awt.event.ActionListener() {
          public void actionPerformed(java.awt.event.ActionEvent evt) {
             commandPerformed(evt);
          }
       });
       
       getContentPane().add(tfCommand, java.awt.BorderLayout.CENTER);
       
       bConnect.setText("Connect");
       bConnect.addActionListener(new java.awt.event.ActionListener() {
          public void actionPerformed(java.awt.event.ActionEvent evt) {
             connect(evt);
          }
       });
       
       getContentPane().add(bConnect, java.awt.BorderLayout.EAST);
       
       pack();
       java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
       setSize(new java.awt.Dimension(500, 18));
       //setLocation((screenSize.width-500)/2,(screenSize.height-18)/2);
       setLocation(27,(screenSize.height-60));
    }//GEN-END:initComponents

    private void connect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connect
       // Add your handling code here:
       if (!fics.isConnected())
          try {
	     System.out.println("Client: attempting to connect");
	     fics.setHandle(handle);
	     fics.setPassword(passwd);
	     fics.setLagCompensation(true);
             fics.connect();
	  }
	  catch (java.net.UnknownHostException e) {
	     e.printStackTrace();
	  }
	  catch (java.io.IOException e) {
	     e.printStackTrace();
	  }
       else
          fics.disconnect();
    }//GEN-LAST:event_connect

    private void conntection(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_conntection
       // Add your handling code here:

    }//GEN-LAST:event_conntection

    private void commandPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandPerformed
       // Add your handling code here:
       fics.sendCommand(tfCommand.getText());
       tfCommand.setText("");
    }//GEN-LAST:event_commandPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
       if (args.length < 2) {
          System.err.println("must supply username and password");
	  System.exit(1);
       }
       handle = args[0];
       passwd = args[1];
       new TestClient().show();
    }

    public void actionPerformed(java.awt.event.ActionEvent actionEvent) {
    }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField tfCommand;
    private javax.swing.JButton bConnect;
    // End of variables declaration//GEN-END:variables

}
